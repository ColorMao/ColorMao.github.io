<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Github搭建个人博客V1.5</title>
      <link href="/2022/10/09/Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2V1-5/"/>
      <url>/2022/10/09/Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2V1-5/</url>
      
        <content type="html"><![CDATA[<h2 id="利用Github-DIY自己的个人博客"><a href="#利用Github-DIY自己的个人博客" class="headerlink" title="利用Github DIY自己的个人博客"></a>利用Github DIY自己的个人博客</h2><h4 id="👋Hi-别来无恙"><a href="#👋Hi-别来无恙" class="headerlink" title="👋Hi 别来无恙"></a>👋Hi 别来无恙</h4><p><strong>利用Github搭建自己的个人博客是一件非常简单的事情，大家不必过于担心，更不必对自己没有信心。</strong></p><p><strong>本教程适用于喜欢💞️ 记录需要免费搭建个人博客的萌新🌱用户，使用此教程任何人都可以轻松搭建自己的博客网站。</strong></p><p>（安装下方的顺序来安装，别弄混了哟👀）</p><p>[TOC]</p><h3 id="第一步配置仓库-github👇"><a href="#第一步配置仓库-github👇" class="headerlink" title="第一步配置仓库 github👇"></a>第一步配置仓库 <a href="https://github.com/">github</a>👇</h3><h4 id="注册-github账号"><a href="#注册-github账号" class="headerlink" title="注册 github账号"></a>注册 github账号</h4><p><a href="https://github.com/"><img src="https://s2.loli.net/2022/08/06/Ue5pRuoPbJMwDvm.png" alt="image-20220802004234602"></a></p><h4 id="创建仓库-github-io"><a href="#创建仓库-github-io" class="headerlink" title="创建仓库.github.io"></a>创建仓库.github.io</h4><p>在以下页面点击新建仓库，仓库名为账号名称例如： <code>ColorMali</code> 然后在后面添加 <code>.github.io</code> 即可；</p><p><img src="https://s2.loli.net/2022/08/06/lePAEg1b5WumKVa.png" alt="image-20220803214629574"></p><h3 id="第二步环境准备"><a href="#第二步环境准备" class="headerlink" title="第二步环境准备"></a>第二步环境准备</h3><h4 id="Git官方网站：Git下载"><a href="#Git官方网站：Git下载" class="headerlink" title="Git官方网站：Git下载"></a>Git官方网站：<a href="https://git-scm.com/download/win">Git下载</a></h4><p><img src="https://s2.loli.net/2022/08/06/Pjt5b29JuLhIxBH.png" alt="image-20220801233344228"></p><h4 id="Node-js官方网站：Node-js下载"><a href="#Node-js官方网站：Node-js下载" class="headerlink" title="Node.js官方网站：Node.js下载"></a>Node.js官方网站：<a href="https://nodejs.org/en/download/">Node.js下载</a></h4><p><img src="https://s2.loli.net/2022/08/06/cXsHFY3nKihByLf.png" alt="image-20220801234316168"></p><h3 id="第三步关于安装"><a href="#第三步关于安装" class="headerlink" title="第三步关于安装"></a>第三步关于安装</h3><p>☝️以上推荐版本都是便携版，无需安装，下载后解压后即可进行下一步变量环境配置如图👇</p><p><img src="https://s2.loli.net/2022/08/06/sUunzkyoWPl8dTb.png" alt="image-20220802000156295"></p><p>配置完成后分别进行以下测试判断是否安装成功：</p><p><strong>Nodejs</strong> –&gt; 在<strong>Windows Powershell</strong>中输入命令：<code> node -v</code> ，出现版本号则证明安装成功</p><p><strong>Git</strong> –&gt; 在<strong>Windows Powershell</strong>中输入命令：<code>git version</code> ，出现版本号则证明安装成功</p><p><img src="https://s2.loli.net/2022/08/06/we5ZfiGE839Ig7O.png" alt="image-20220802001217857"></p><h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><p>打开<strong>git-bash</strong>输入安装命令：<code>npm install hexo -g</code></p><p>运行结束后输入测试输入命令：<code>hexo -v</code> 验证是否安装成功</p><p><img src="https://s2.loli.net/2022/08/06/zho3r7RQKayNVqS.png" alt="image-20220802002230460"></p><h3 id="第四步git配置SSH-key"><a href="#第四步git配置SSH-key" class="headerlink" title="第四步git配置SSH key"></a>第四步git配置SSH key</h3><blockquote><p>为什么要配置SSH key？</p><p>目的：可以免密的将本地的源码和资源上传到github，无需要每次都输账号和密码。</p></blockquote><h4 id="命令生成"><a href="#命令生成" class="headerlink" title="命令生成"></a>命令生成</h4><p>打开<strong>git-bash</strong>输入安装命令：<code>ssh-keygen -t rsa -C</code></p><p>输入生成命令：<code>ssh-keygen -t rsa -C "zhangyumao@petalmail.com"</code> 后；连续按<strong>Enter</strong>三次即可；<a href="%E9%82%AE%E4%BB%B6%E5%9C%B0%E5%9D%80%E6%98%AFgithub%E8%B4%A6%E5%8F%B7%E7%BB%91%E5%AE%9A%E7%9A%84%E9%82%AE%E4%BB%B6%E5%9C%B0%E5%9D%80%E3%80%82">👉查看备注</a></p><p>检查本地是否有配置好SSH key 输入命令：<code>cd ~/.ssh</code></p><p><img src="https://s2.loli.net/2022/08/06/ABFwSpls5nd7yQ4.png" alt="image-20220803234139184"></p><h4 id="命令安装"><a href="#命令安装" class="headerlink" title="命令安装"></a>命令安装</h4><p>可以看到在用户文件夹下生成了一个<strong>ssh</strong>文件夹</p><p><img src="https://s2.loli.net/2022/08/06/1mbw69zELWkh2B4.png" alt="image-20220802010747803"></p><p>进入到<strong>ssh</strong>文件夹，复制<strong>id_rsa.pub</strong>文件里全部内容</p><p><img src="https://s2.loli.net/2022/08/06/xEk4dpPIvroW5z6.png" alt="image-20220802010910855"></p><p>接着打开github个人主页点击<a href="https://github.com/">👉<strong>Settings</strong></a>，打开个人设置，点击左侧的  <strong>SSH and GPG keys</strong>，点击新建<strong>New SSH key</strong>，完成后点击 <strong>Add SSH key</strong></p><p><img src="https://s2.loli.net/2022/08/06/N738yBbPijuDCIa.png" alt="image-20220802155414644"></p><p>点击 <strong>Add SSH key</strong>提交后测试是否成功，输入命令：<code>ssh -T git@github.com</code> 如图所示表示成功：</p><p><img src="https://s2.loli.net/2022/08/06/D15boksa2Apge7c.png" alt="image-20220802160431035"></p><h4 id="设置git用户名和邮箱"><a href="#设置git用户名和邮箱" class="headerlink" title="设置git用户名和邮箱"></a>设置git用户名和邮箱</h4><p>如果没有初始化过用户名和邮箱，需要用<strong>命令提示符</strong>设置一下用户名和邮箱。</p><p><code>git config --global user.name "ColorMao"</code><br><code>git config --global user.email "zhangyumao@petalmail.com"</code></p><p><img src="https://s2.loli.net/2022/08/06/oCVFjiSuMarLqps.png" alt="image-20220803215417549"></p><p>邮箱地址最好是真实有效的，而且最好是GitHub或者gitee的注册邮箱。</p><h4 id="查看git用户名和密码"><a href="#查看git用户名和密码" class="headerlink" title="查看git用户名和密码"></a>查看git用户名和密码</h4><p>查看用户名 ：<code>git config user.name</code></p><p>查看密码： <code>git config user.password</code></p><p>查看邮箱：<code>git config user.email</code></p><p>查看配置信息：<code>git config --list </code></p><p>修改用户名和密码：<code>git config --global user.name "xxxx(新的用户名)"</code></p><p>修改密码：<code>git config --global user.password "xxxx(新的密码)"</code></p><p>修改邮箱：<code>git config --global user.email "xxxx@xxx.com(新的邮箱)"</code></p><h4 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h4><p>配置完成后使用命令查看全局配置，输入命令： <code>git config user.name</code></p><p><img src="https://s2.loli.net/2022/08/06/1njNAOZm9LT5fpb.png" alt="image-20220802182859738"></p><h3 id="第五步搭建个人博客"><a href="#第五步搭建个人博客" class="headerlink" title="第五步搭建个人博客"></a>第五步搭建个人博客</h3><h4 id="设置本地配置"><a href="#设置本地配置" class="headerlink" title="设置本地配置"></a>设置本地配置</h4><p>创建一个本地保存博客的存放文件夹，例如：<code>D:\ZhangYuMao\Blog Space</code></p><p>用<strong>git</strong>命令 进入文件夹：</p><ul><li>输入 <code>cd D:</code>切换到目录所在磁盘下；</li><li>输入 <code>cd ZhangYuMao</code> 再次切换到下层目录所在位置；</li><li>当用cd 进入文件夹时,我们可以使用 【通配符： $\color{red}{*} $ 】； 例如 <code>cd B*</code> 如果当前文件夹下只有一个B开头的文件夹,它就会进入到该文件夹；</li><li>继续向下切换可以输入下层文件夹名称；例如：<code>cd 22Y08M03D*</code></li><li>进入到本地博客指定存放目录，输入命令：<code>hexo clean</code> 开始初始化 个人博客；</li></ul><p><img src="https://s2.loli.net/2022/08/06/8J6AeWsvQgKzLcT.png" alt="image-20220803100301044"></p><h4 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h4><p>使用命令 <code>hexo clean</code> 可以清除缓存，清除缓存可以让新配置的信息立即生效。</p><p>然后执行命令：<code>hexo generate</code> 自动根据当前目录下文件,生成静态网页；</p><p><img src="https://s2.loli.net/2022/08/06/FsQCXOBAwtL6UGN.png" alt="image-20220803100852886"></p><p>然后执行命令：<code>hexo server</code>  部署到本地服务器预览；注：Ctrl+C 可结束运行。</p><p><img src="https://s2.loli.net/2022/08/06/qigZm2MlDoEkGfL.png" alt="image-20220803103010959"></p><p>这时在浏览器输入： <a href="http://localhost:4000/">http://localhost:4000/</a> 就可以看到如下效果：</p><p><img src="https://s2.loli.net/2022/08/06/T9Q2ivd8sMFbw5q.png" alt="image-20220803112948083"></p><h4 id="相关插件安装"><a href="#相关插件安装" class="headerlink" title="相关插件安装"></a>相关插件安装</h4><p>安装依赖打开<strong>git-bash</strong>输入安装命令：<code>npm install --save hexo-deployer-git</code></p><p><img src="https://s2.loli.net/2022/08/06/DRHLtXxAcFOhlEu.png" alt="image-20220802002745592"></p><p>安装Hexo后台输入安装命令：<code> npm install --save hexo-admin</code></p><p><img src="http://colormao.top/TC22Y09M/image-20221009211535012.png" alt="image-20221009211535012"></p><p>插件查询安装地址：<a href="https://hexo.io/plugins/">Hexo</a></p><p>需要安装的插件名称，输入命令： <code>npm install  hexo-bridge </code></p><p>例如安装 <a href="https://github.com/DeepSpaceHarbor/hexo-bridge">hexo-bridge</a> 如下图表示成功<img src="https://s2.loli.net/2022/08/06/B6iKwUZFgAnLDaN.png" alt="image-20220803105611711"></p><h4 id="发布博客到github"><a href="#发布博客到github" class="headerlink" title="发布博客到github"></a>发布博客到github</h4><p>在博客存放目录下打开编辑 <strong>_config.yml</strong>文件，编辑以下内容：<strong>注</strong>：注意： <code>： </code> 冒号前有一格空格。</p><pre class="line-numbers language-none"><code class="language-none">deploy:  type: git  repository: git@github.com:ColorMao/ColorMao.github.io.git  branch: main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>repository仓库地址改为自己的 <strong>ColorMao.github.io</strong> 仓库地址；</p><p>branch看自己的github仓库是 <strong>master</strong> 还是 <strong>main</strong>；</p><p><img src="https://s2.loli.net/2022/08/06/6bDiTFSzvQN21Ep.png" alt="image-20220803133312241"></p><p>简单设置主页面简介及语言</p><p><img src="https://s2.loli.net/2022/08/06/rAyOsF9KLhMQnZN.png" alt="image-20220804174707543"></p><p>完成后输入命令：<code>hexo d</code> 开始发布到 <strong>github</strong></p><p>完成后在浏览器输入：<a href="https://colormao.github.io/">https://colormao.github.io/</a> 即可访问；注：hello world 是官方放入的一篇文章。</p><p><img src="https://s2.loli.net/2022/08/06/NEX1OxLVKfiqnol.png" alt="image-20220803134055166"></p><h3 id="第六步编辑博客"><a href="#第六步编辑博客" class="headerlink" title="第六步编辑博客"></a>第六步编辑博客</h3><h4 id="如何添加自己的博客"><a href="#如何添加自己的博客" class="headerlink" title="如何添加自己的博客"></a>如何添加自己的博客</h4><p>例如新建一篇名为：《致橡树》的博客，输入新建命令：<code>hexo new '致橡树'</code> </p><p><img src="https://s2.loli.net/2022/08/06/qUI6cEdrog7aOs9.png" alt="image-20220804175248750"></p><p>运行完成后查看对应的文件夹</p><p><img src="https://s2.loli.net/2022/08/06/Drsd9u3yUlNYCZQ.png" alt="image-20220804175444790"></p><p>可以看到生成了一个名为：<strong>致橡树.md</strong> 的文件，然后通过这个md文件去写博客即可；</p><p><img src="https://s2.loli.net/2022/08/06/Mzn7xKLvQd2PWYN.png" alt="image-20220804180239244"></p><p>其中 <code>&lt;!--more--&gt;</code> 的作用是在查看文章的时候，点击more的时候再加载全部的文章内容；</p><p>编写好之后，开始部署到github</p><p>运行服务器的命令：<code>hexo server</code> ；详细信息：<a href="https://hexo.io/docs/server.html">服务器</a></p><p>生成静态html文件的命令： <code>hexo generate</code> ；详细信息：<a href="https://hexo.io/docs/generating.html">生成</a></p><p>部署到远程站点github的命令：<code>hexo deploy</code> ；详细信息：<a href="https://hexo.io/docs/one-command-deployment.html">部署</a></p><p>刷新页面再次访问：<a href="https://colormao.github.io/">https://colormao.github.io/</a></p><p><img src="https://s2.loli.net/2022/08/06/1sJgyo56IpkE7MH.png" alt="image-20220804175940574"></p><h4 id="如何更换皮肤"><a href="#如何更换皮肤" class="headerlink" title="如何更换皮肤"></a>如何更换皮肤</h4><p>如何换皮肤，去github上找：<a href="https://github.com/hexojs/hexo/wiki/Themes">https://github.com/hexojs/hexo/wiki/Themes</a></p><p>发现一个喜欢的主题，用git把项目克隆下来 </p><p>然后把文件放入 <strong>\hexo\themes中</strong></p><p>然后去根目录下找到文件_config.yml<br>找到这段代码：</p><pre class="line-numbers language-none"><code class="language-none"># Extensions## Plugins: http://hexo.io/plugins/## Themes: http://hexo.io/themes/theme: landscape<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>把theme改成新下的皮肤的文件夹名后保存文件，然后重新 <code>hexo generate hexo server</code> ；</p><h3 id="相关备注"><a href="#相关备注" class="headerlink" title="相关备注"></a>相关备注</h3><h4 id="heox-基本命令"><a href="#heox-基本命令" class="headerlink" title="heox 基本命令"></a>heox 基本命令</h4><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">hexo <span class="token keyword">new</span> <span class="token string">"postName"</span> <span class="token preprocessor property">#新建文章</span>hexo <span class="token keyword">new</span> page <span class="token string">"pageName"</span> <span class="token preprocessor property">#新建页面</span>hexo generate #生成静态页面至<span class="token keyword">public</span>目录hexo server #开启预览访问端口（默认端口<span class="token number">4000</span>，'ctrl <span class="token operator">+</span> c'关闭server）hexo deploy #部署到GitHubhexo help  # 查看帮助hexo version  #查看Hexo的版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="git-bash-基本命令"><a href="#git-bash-基本命令" class="headerlink" title="git bash 基本命令"></a>git bash 基本命令</h4><p>回退到上一个目录， 注意，cd 和两个点点..之间有一个空格：<code>cd ..</code></p><p>显示当前目录路径： <code>pwd</code></p><p>列出当前目录中的所有文件，只不过(两个ll)列出的内容更为详细：<code>ls(ll)</code></p><p>新建一个文件 如 touch index.js 就会在当前目录下新建一个index.js文件：<code>touch</code></p><p>删除一个文件, rm index.js 就会把index.js文件删除 <code>rm:  </code></p><p>新建一个目录,就是新建一个文件夹. 如mkdir src 新建src 文件夹：<code>mkdir: </code></p><p>删除一个文件夹,  rm -r src 删除src目录， 好像不能用通配符：<code>rm -r : </code></p><p>移动文件,如： mv index.html 是需要移动的文件, src 是目标文件夹,必须保证文件和目标文件夹在同一目录下：<code>mv </code></p><p>清屏，把git bash命令窗口中的所有内容清空：<code>reset </code></p><h3 id="相关帮助"><a href="#相关帮助" class="headerlink" title="相关帮助"></a>相关帮助</h3><h4 id="1-0-不推荐使用npm-WARN-config-global-global、-local-使用“-location-x3D-global”"><a href="#1-0-不推荐使用npm-WARN-config-global-global、-local-使用“-location-x3D-global”" class="headerlink" title="1.0 不推荐使用npm WARN config global--global、--local.使用“-location=global”."></a><strong>1.0</strong> 不推荐使用npm WARN config global<code>--global</code>、<code>--local</code>.使用“-location=global”.</h4><pre class="line-numbers language-none"><code class="language-none">$ npm install hexo-cli -gnpm WARN config global `--global`, `--local` are deprecated. Use `--location=global` instead.npm ERR! code EEXIST<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>1.1</strong> 打开 Node 安装路径，找到以下两个文件</p><p><img src="https://s2.loli.net/2022/08/06/AysrO81xb9moGUi.png" alt="image-20220803211354169"></p><p><strong>1.2</strong> 打开后将2个文件里面的 <code>prefix -g </code>替换为 <code>prefix --location=global</code></p><p><img src="https://s2.loli.net/2022/08/06/BOslcJy2ZXQjTM7.png" alt="image-20220803212226989"></p><p><img src="https://s2.loli.net/2022/08/06/uyhbUw1BYZn7AKl.png" alt="image-20220803212018372"></p><p>保存重新打开 <code>cmd</code> 运行 <code>npm-v</code> 即可</p><hr><h4 id="2-0-目标文件夹不为空，请在空文件夹上运行-“hexo-init”-，然后将文件复制到其中"><a href="#2-0-目标文件夹不为空，请在空文件夹上运行-“hexo-init”-，然后将文件复制到其中" class="headerlink" title="2.0 目标文件夹不为空，请在空文件夹上运行 “hexo init” ，然后将文件复制到其中."></a><strong>2.0</strong> 目标文件夹不为空，请在空文件夹上运行 “hexo init” ，然后将文件复制到其中.</h4><pre class="line-numbers language-none"><code class="language-none">$ hexo initINFO  Validating configFATAL D:\ZhangYuMao\Blog Space\22Y08M03D\ not empty, please run `hexo init` on an empty folder and then copy your files into itFATAL {  err: Error: target not empty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入命令：<code>rm -rf *</code>  （此语句的作用是清空当前目录下的所有东西,谨慎使用，一定要在对应的blog下。）</p><hr><h4 id="3-0-找不到部署程序时出错：git"><a href="#3-0-找不到部署程序时出错：git" class="headerlink" title="3.0 找不到部署程序时出错：git"></a><strong>3.0</strong> 找不到部署程序时出错：git</h4><pre class="line-numbers language-none"><code class="language-none">$ hexo dINFO  Validating configERROR Deployer not found: git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>原因：少了hexo针对git的deploy组件</p><p>解决方法：<code>npm install --save hexo-deployer-git</code></p><hr><h4 id="4-0-YAMLException-无法读取块映射项；多行键可能不是隐式键（4-1）"><a href="#4-0-YAMLException-无法读取块映射项；多行键可能不是隐式键（4-1）" class="headerlink" title="4.0 YAMLException:无法读取块映射项；多行键可能不是隐式键（4:1）"></a>4.0 YAMLException:无法读取块映射项；多行键可能不是隐式键（4:1）</h4><pre class="line-numbers language-none"><code class="language-none">$ hexo generateINFO  Validating configINFO  Start processingERROR {  err: YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key (4:1)   1 | title: 致橡树   2 | date: 2022-08-04 16:12:07   3 | tags:0804   4 |  -----^<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4.1</strong> 此类问题一般出现在生成静态html文件时，解决方法，登录github进入 <strong>.github.io</strong> 仓库，删除掉仓库目录下的所以文件；</p><p><img src="https://s2.loli.net/2022/08/06/u7tTbEZlysDWpj3.png" alt="image-20220804184057079"></p><p><strong>4.2</strong> 打开 git-bash 进入目标博客目录文件夹，使用命令 <code>hexo clean</code> 清除缓存；</p><p><strong>4.3</strong>然后执行命令：<code>hexo generate</code> 根据当前目录生成静态网页；</p><p><img src="https://s2.loli.net/2022/08/06/xYrazAg87MPmcVv.png" alt="image-20220804185231497"></p><p><strong>4.4</strong>然后执行命令：<code>hexo server</code>  从新部署到本地服务器预览；注：<strong>Ctrl+C</strong> 可结束运行。</p><p><strong>4.5</strong>预览确定正常后输入命令：<code>hexo d</code> 即可正常发布到 <strong>github</strong></p><p><img src="https://s2.loli.net/2022/08/06/6AXwGYs24TgbLMh.png" alt="image-20220804185522596"></p><p><strong>4.6</strong>完成后在浏览器输入：<a href="https://colormao.github.io/">https://colormao.github.io/</a> 即可访问；</p><p><strong>4.7</strong> 漏洞修复 <code>npm audit fix --force</code></p><h4 id="5-0-更多帮助请访问：-●’◡’●-hexo配置"><a href="#5-0-更多帮助请访问：-●’◡’●-hexo配置" class="headerlink" title="5.0 更多帮助请访问：(●’◡’●)hexo配置"></a>5.0 更多帮助请访问：<a href="https://hexo.bootcss.com/docs/configuration.html"><strong>(●’◡’●)hexo配置</strong></a></h4><p>——————————————————<strong>END</strong>——————————————————</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搭建博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/10/08/hello-world/"/>
      <url>/2022/10/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
